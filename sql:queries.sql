/* queries for Student Database Project */
--BASIC SELECT QUERIES
    --LIST OF ALL STUDENTS
    SELECT * FROM student;
    --COURSES TABLE
    SELECT * FROM courses;
    --ENROLLMENTS TABLE
    SELECT * FROM ENROLLMENTS;

--FILTRATION WITH WHERE CLAUSE
    --INFORMATION OF COURSE ID 209
    SELECT * FROM courses WHERE course_id = 209;
    --STUDENTS ENROLLED FOR COURSE ID 209
    SELECT * FROM enrollments WHERE course_id = 209;

--SORTING THE DATA USING ORDER BY CLAUSE
    --INFORMATION OF STUDENTS SORTED IN DESCENDING ORDER OF AGE AND ASCENDING ORDER OF NAME
    SELECT * FROM student ORDER BY age DESC,name ;
    --STUDENTS HAVING GRADE "O" IN THEIR ENROLLED COURSES DISPLAYED IN ASCENDING ORDER OF THEIR IDs
    SELECT student_id,course_id FROM ENROLLMENTS WHERE grade = "O" ORDER BY  student_id ASC;

--AGGREGATION (COUNT,MIN,MAX,AVG,SUM)
    --TOTAL NUMBER OF ENROLLMENTS DONE BY STUDENTS
    SELECT  COUNT(*) AS no_of_enrollments  FROM ENROLLMENTS;
    --TOTAL NUMBER OF CREDITS RECIEVED BY THE STUDENT HAVING STUDENT ID 1
    SELECT SUM(CREDITS) AS total_credits FROM ENROLLMENTS 
    INNER JOIN COURSES ON ENROLLMENTS.COURSE_ID = COURSES.COURSE_ID WHERE student_id = 1;

--GROUP BY 
    --COURSE IDs WITH NUMBER OF STUDENTS ENROLLED IN THAT COURSE
    SELECT course_id,COUNT(student_id) AS no_of_students FROM ENROLLMENTS GROUP BY course_id;
    --USING HAVING CLAUSE WE WILL FIND COURSE IDs WITH NUMBER OF ENROLLMENTS GREATER THAN 3
    SELECT course_id,COUNT(student_id) AS no_of_students FROM ENROLLMENTS 
    GROUP BY course_id HAVING no_of_students > 3;

--JOINS
    --INNER JOIN
    --INFO OF COURSE NAMES,IDs AND NUMBER OF ENROLLMENTS FOR THAT COURSE
    SELECT courses.COURSE_NAME,courses.course_id,COUNT(ENROLLMENTS.ENROLLMENT_ID) AS no_of_enrollments 
    FROM courses INNER JOIN enrollments ON courses.COURSE_ID = ENROLLMENTS.COURSE_ID
    GROUP BY COURSES.COURSE_ID ORDER BY courses.course_id ASC;

    --LEFT JOIN
    --INFO OF ALL COURSE NAMES,IDs AND NUMBER OF ENROLLMENTS FOR THAT COURSE
    SELECT courses.COURSE_NAME,courses.COURSE_ID,COUNT(ENROLLMENTS.ENROLLMENT_ID) AS  no_of_enrollments 
    FROM courses LEFT JOIN enrollments ON courses.COURSE_ID = ENROLLMENTS.COURSE_ID
    GROUP BY COURSES.COURSE_ID ORDER BY no_of_enrollments ASC;

    --RIGHT JOIN
    --INFO OF ALL ENROLLMENT ID,COURSE ID AND COURSE CREDITS RESPECTIVELY 
    SELECT ENROLLMENTS.ENROLLMENT_ID,COURSES.COURSE_ID,courses.CREDITS FROM 
    courses RIGHT JOIN ENROLLMENTS ON courses.COURSE_ID = ENROLLMENTS.COURSE_ID
    ORDER BY ENROLLMENT_ID ASC;

--SUB QUERIES
    --RETRIVING THE STUDENTS WHO ENROLLED FOR COURSES AND DID NOT ENROLLED FOR THE "AI-ML" COURSE
    SELECT ENROLLMENTS.ENROLLMENT_ID,student.STUDENT_ID FROM student INNER JOIN ENROLLMENTS ON STUDENT.STUDENT_ID = ENROLLMENTS.STUDENT_ID
    WHERE ENROLLMENTS.STUDENT_id NOT IN (SELECT STUDENT_ID FROM ENROLLMENTS INNER JOIN COURSES 
    ON ENROLLMENTS.course_ID =  COURSES.COURSE_ID WHERE COURSES.COURSE_NAME = "AI-ML");

--USING DISTINCT
    --RETRIEVAL OF COURSE_IDs WHICH HAVE BEEN ENROLLED BY ATLEAST ONE STUDENT
    SELECT DISTINCT COURSE_id FROM ENROLLMENTS;

--UPDATE CLAUSE 
    --CHANGING THE AGE TO 23 FOR THE STUDENT WHOSE NAME IS SATHVIKA
    UPDATE student SET age = 23 WHERE name = "SATHVIKA";
    --TO VERIFY THE CHANGES
    SELECT age FROM student WHERE name = "SATHVIKA";

--TO DELETE A ROW OR COMPLETE TABLE
    --TO DELETE PARTICULAR COLUMN FROM THE TABLE
    DELETE FROM ENROLLMENTS WHERE ENROLLMENT_ID = 1002;

    SELECT * FROM ENROLLMENTS;
    --TO DELETE A TABLE
    DROP TABLE ENROLLMENTS;
    SELECT * FROM ENROLLMENTS;